<html><head>
    <title>UFO Sightings</title>
    
      <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">
    
      <link rel="stylesheet" type="text/css" href="../css/normalize.css">
      <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
      <link rel="stylesheet" type="text/css" href="../css/custom-style.css">
    
      <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/styles/default.min.css">
      <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/highlight.min.js"></script>
      <script src="https://d3js.org/d3.v5.min.js"></script>
      <script src="https://d3js.org/topojson.v2.min.js"></script>
      <style>
    
      .neighborhood {
        fill: #EEE;
        stroke: white;
        stroke-width: 2px;
      }
    
      </style>
    
    </head>
    <body style="background-color:#999fa8;">
      <div class="container larger">
        <p style="color: white; font-family:Verdana; font-size:250%;"> <b>UFo Sightings</b></p>
      <svg id="points" height="900" width="900" style="background: #999fa8; margin-top:50px" >
    
      </svg>
    
    
    
      <script id="notes1">
    
      
      const requestData = async function() {
       
        const UFO = await d3.csv("./scrubbed.csv");
        
       
        // We need to figure out where to position the dots. Since we may have a lot of them, let's process
        //  the data ahead of time and add to our dict
        // (Main reason for doing this is that otherwise we would have to call projection() twice, once
        //    for 'cx' and once for 'cy')
        
        
        let dataList = [];
        //gets important data that we care about from data file
        UFO.forEach( d => {
          
          var temp = {
            "Shape": d.shape,
            "Country": d.country,
            "Year": d.datetime.split(" ")[0].split("/")[2],
            "Month": d.datetime.split(" ")[0].split("/")[0],
            "Day": d.datetime.split(" ")[0].split("/")[1],
            "Comments": d.comments
          }; 

          dataList.push(temp);

        });
        
        //console.log(dataList); 
        //gets number of sightings per shape (~29 or 30) 
        function getShapeFrequency(UFOdata){
          let shapeFreq = {}; 
          for (var i = 0; i<UFOdata.length; i++){
            var shape = UFOdata[i]["Shape"];
            if (shape in shapeFreq) {
              shapeFreq[shape] +=1;
            } else {
              shapeFreq[shape] = 1;
            }
          };
          return shapeFreq; 
        }
        //console.log(getShapeFrequency(dataList)); 

        function getShapeFrequencyByCountry(UFOdata, country) {
          let shapeFreq = {};
          for (var i = 0; i<UFOdata.length; i++){
            var nation = UFOdata[i]["Country"];
            if (nation == country){
              var shape = UFOdata[i]["Shape"];
              if (shape in shapeFreq) {
                shapeFreq[shape] += 1;
              } else {
                shapeFreq[shape] = 1;
              }
            } 
          };
          return shapeFreq;
        }

        console.log(getShapeFrequencyByCountry(dataList, "gb")); 
        

      //   function getRandomColor() {
      //       var letters = '0123456789ABCDEF';
      //       var color = '#';
      //       for (var i = 0; i < 6; i++) {
      //           color += letters[Math.floor(Math.random() * 16)];
      //       }
      //       return color;
      //   }
      //   let colorList = []
      //   // trees.forEach( d => {
      //   //     if (!species.includes(d.qSpecies)) {
      //   //         species.push(d.qSpecies); 
      //   //         colorList.push(getRandomColor()); 
      //   //     }
      //   // }); 


      //   trees.forEach( d => {
      //       if (!caretaker.includes(d.qCaretaker)) {
      //           caretaker.push(d.qCaretaker); 
      //           //colorList.push(getRandomColor()); 
      //       }
      //   }); 

      //   //random colors to fill list to required length, but these points are not noticeable in visualization 
      //   colorList = ["#1a7540", "#1c23eb","#a11b53", "#6ab8cc", "#7c6acc", "#97cc68", "#ede964", "#edbd64", "#ed8d64", "#6472ed", "#ed6464", 
      //   getRandomColor(), getRandomColor(), getRandomColor(), getRandomColor(),getRandomColor(),getRandomColor(),getRandomColor(),
      //   getRandomColor(),getRandomColor(),getRandomColor(),getRandomColor(),getRandomColor()]; 

      //   //console.log(species.length); 
      //   console.log(caretaker.length);

      //   //for fill: function (d) { return colorList.indexOf(d.qSpecies);}

      //   // Draw circles using the Positions we just made
      //   map.selectAll("circle").data(trees)
      //      .join("circle")
      //      .attr("r", function (d) { return d.DBH/10;})
      //      .attr("fill", function (d) { return colorList[caretaker.indexOf(d.qCaretaker)];})
      //      .attr("opacity", 0.4)
      //      .attr("cx", d => d.Position[0])
      //      .attr("cy", d => d.Position[1]);
        
        
        
       }
      requestData();
      
      
      
    
    
    
    
      </script>
    
    
    
    
    
      
    
      </div>
    </body>
    </html>
    